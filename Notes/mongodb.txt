# comparison between sql terminology and mondodb

sql 
  database 
    table 
	  columns 
	    rows

mongodb 
   database 
     collections 
	    documents 
		   key-value pair 
		   
		   Example:
		   sql :
		   
		   Database :testdb 
		     Table: student 
			        Name   Email           phonnumber
					Raj  abc@gmail.com     82102023939
					Ra2  abc@gmail.com     82102023939
		  
		  MongoDB:
		    Datbase : nodejs830pm 
			  collections :students
			         doc1=>{
					    Name: Raj ,
						Email: abc@gmail.com,
						phonenumber:8210202331
					 },
					 doc1=>{
					    Name: Raj2 ,
						Email: abc@gmail.com,
						phonenumber:8210202331
                     }
================================================
MongoDB Cheat Sheet:



1. show dbs;  => to display all databases 
2. use <dbnam> =>
     use nodejs830pm ; => helps to switch from one database
                          to other or if the db is available it will create new db and switch to that db .


Note: To show yoor new  database  in DB list =>your database have at least one collection .

3. Create Collection :
    db. createCollection('students');

4. Data Insert under collection 
   A. Single Insert
=================INSERT ======================
    db.students.insert({
        Name:"Raj",
        Mobile:82102023331,
        Email:abbsv@gmail.com
    });

   B. Multiple insert  

    db.students.insertMany(
        [
        {
        Name:"Amit",
        Mobile:82102023331,
        Email:abbsv@gmail.com
        },
        {
        Name:"Summet",
        Mobile:82102023331,
        Email:abbsv@gmail.com
        }
        ]
    );   

    Note: whenever a document inserted in your collection , mongodb assign a unique _id to every document .
==============SELECT ALL DATA=============================

5. To list (show) all data in collection:
   sql => select * from students ;
   Mongodb=>db.students.find();

Note: to display the output in proper format we have pretty() method 
  db.students.preety();

=======SELECT PARTICULA FIELD==================
6. WAQ  to select name ,mobile, from students collection .

db.students.find({},{Name:1,Mobile:1});

============HIDE DEFAULT FEILD _ID===============
7. WAQ to select name and email and _id should not return by deafult from students collection .
sql=> select Name, Email  from students
Mongodb=>db. students.find({},{Name:1,Email:1,_id:0});

=================CONDITION DURING SELECT=============
8 .WAQ to find student deatils whose mobile is 8210202331

 sql=> select * from students where Mobile=8210202331
 MONGODB=> db.students.find({Mobile:8210202331});

9.WAQ to find student Name  whose mobile number is 8210202331
sql => select Name from students where Mobile=8210202331.
Mongodb=> db.students.find({Mobile:8210202331},{Name:1,_id:0});

10 . WAQ to find Student details where Mobile number 
    not equals to 8210202331
==================NOT EQUAL========================
Sql => select * from students where mobile <>8210202331
Mongodb => db.students.find({Mobile:{$ne:8210202331}});

Note: $ne  operator use to declare not equal to 

10 . WAQ to find Student Name  where Mobile number 
    not equals to 8210202331

Sql => select Name from students where mobile <>8210202331
Mongodb => db.students.find(
    {
    Mobile:{$ne:8210202331}
    },
    {
        Name:1,_id:0
    });
===============AND CONDITION====================
11. WAQ to find student all deatils  where mobile is 8210202331
    and Name is Raj2

    Sql => select * from students where Mobile=8210202331 and Name='Raj2'
    MONGODB=>db.students.find(
        {
            Mobile:8210202331,
            Name:'Raj2'
        }
    );
Note: Here we implement and condition using comma(,) in same block{}

=============MULTIPLE AND===============
12. WAQ to find students Mobile whose Name is Raj and Email is abc@gmail.com and age=25
sql => select mobile from students where name='Raj' and Email='abc@gmail.com' and age=25
MONGODB=>
  db.students.find(
    {
        Name:'Raj',
        Email:'abc@gmail.com',
        Age:25
    },
    {
        Mobile:1,
        _id:0
    }
  );
==============GREATER THAN ======================
13. select students all details where  age is greater than 20
 sql => select * from students where age > 20 
 Mongodb=> db.students.find({
    age:{$gt:20}
 });

 Note: $gt  got greater than 
==============LOWER THAN ===================
14. select students all details where  age is less than 20
 sql => select * from students where age < 20 
 Mongodb=> db.students.find({
    age:{$lt:20}
 });

 Note: $lt  got lower than 

==================BETWEEN =======================
 15. select students details whose salary is greater than equals to 2000 and less than equal to 6000

 sql=> select * from students where salary>=19 and salary<=25;
 mongodb=> db.students.find(
    {
        salary:{$gte:2000 , $lte :5000}
    }
 );

 Note: $gte : greater than equals to 
       $lte : less than equals to 

======================OR CONDITION=================
15 .select employees who belongs to department Engineering or Sales 
  sql => select * from employees where departemnt ='Engineering' or departemnt='Sales';
  Mongodb => db.employees.find(
    {
        $or:[{department:'Engineering'},{department:'sales'}]
    }
  );
=======================AND OPERATOR==================
16. select employess who belongs to Engineering department and salary is 90000

sql => select * from employees where departemnt='Engineering' and salary=90000

mongodb :
   db.employees.find({
      departemnt:'Engineering',
      salary:90000
   });
     Or
   db.employees.find({
      $and:[{department:'Engineering'},{salary:'90000'}]
   });

17. WAQ to select employees where departemnt='Engineering' 
and salary 60000 or 70000;

Mongodb=> db.employees.find(
    {
        department:'Engineering' ,
        $or:[{salary:60000},{salary:70000}]
    }
);

or 

db. employees.find({
    $and:[
        {
            department:'Engineering'
        },
        {
             $or:[{salary:60000},{salary:90000}]
        }
    ]
});

18. select employees  where 
[(department =sales and salary 70000) 
and (managerId=29 or managerId=30) ] or  employeePosition='Teamlead'

db.employees.find({
    $or:[
        {
            $and:[
                {
                 $and:[
                    {department :sales},
                    {salary :70000}
                 ]
                },
                {
                 $or:[
                    {managerId:29},
                    {managerId:30}
                 ]
                }
            ]
        },
        {
         employeePosition:'Teamlead'
        }
    ]
});

======================IN ==============================
19: select employees whose age in 25 , 30 , 45

sql=> select employees where age in(25,30,45);
mongodb=>
db.employees.find({
  age:{$in:[25,30,45]}
})
=====================NOT IN========================
19: select employees whose age notin 25 , 30 , 45

sql=> select employees where age in(25,30,45);
mongodb=>
db.employees.find({
  age:{$nin:[25,30,45]}
})

Note: $in  and $nin (not in)  and pass data in array

20.select employees whose age not equal to 25 

mongodb=>
db.employees.find({
    age:{$ne:25}
})
Note: &ne : NOT

=====================COUNT====================
21. select total number of records in employees table;

sql => select count(*) from employees 
Mongodb => db.employees.count();
Note: count() methods returns total number of documents in ypur collection .

22. select count of employee whose salary is greater than 85000.

db.employees.find({
    salary:{$gt:85000}
}).count();

or 
db.employees.count({
    salary:{$gt:85000}
})

=====================ORDER BY ==========================

23. waq to find employee deatails and sort salary in ascending order .

mnongdb=> db.employees.find().sort({salary:1});
Note: sort(salary:1) this methods helps to sort dcoument 
      and 1 denotes ascending order by salary column

24. waq to find employee deatails and sort salary in desceding order .
db.employees.find().sort({salary:-1});
Note:-1 reprsent desceding order.

25. WAQ to find employee deatils who belongs to sales department 
    and sort data a/c to higher salary comes first .

   db.employee.find({
    departemnt:"sales",
   }).sort({salary:-1});

======================EXISTS ====================
26. WAQ to find students deatils where column age exists 

db.students.find({age:{$exists:true}});

27. WAQ to find students deatils where column age does not exists 
db.students.find({age:{$exists:false}});


28.WAQ to find students details where name and email column exists 
db.students.find(
    {
        $and:[
            {Name:{$exists:true}},
            {Email:{$exists:true}},
        ]
    }
);

29.WAQ to find students name where [name and email column exists ]
 and mobile =8210202331

db.students.find(
    {
        $and:[
            {Name:{$exists:true}},
            {Email:{$exists:true}},
            {mobile:8210202331}
        ]
    },
    {
        name:1,
        _id:0
    }
);

==================UPDATE ===============================
30 . waq to update student mobile number whose name is Raj .

=> sql => update students set Mobile=9709997286 where name='raj'.
mongodb=> > db.students.updateOne({Name:"Raj"},{$set:{Mobile:9709997286}});
====================DELETE=============================
31.WAQ to selete student whose name is 'Raj'
db.students.deleteOne({Name:"Raj"});
db.students.deletMany({Name:"Raj"});
=====================DROP ====================
32. WAQ to remove any collection 
db.collection.drop();
====================TRUNCATE==================
32.Truncate your collection .
db.students.deletMany({});
====================LIMIT ====================
33.WAQ to find two document from our collection 
db.stundets.find().limit(2);
==================== SKIP =====================
34.WAQ to find two document after skiping first document
db.students.find().skip(1).limit(2);
======================LIKE================
35. WAQ to find student details whose name like "Raj2"

db.students.find({
    Name:{$regex:"Raj"}
});

36.WAQ to find student details whose name like "Raj" and the search should be incase sensetive
db.students.find({ Name: { $regex: "Raj" ,$options:"i"} });

Note: By deafult monogdb search in case sensetive mode
Note: basically here is it is searching the substring "Raj"

37. WAQ to find student deatils whose name starts with Raj.

db.students.find({
    Name:{$regex:"^Raj"}
});
Note: ^ symbol denotes that name should start with "Raj"

38. WAQ to find student details whose name ends with "Raj"
db.students.find({
    Name:{$regex:"Raj$"}
});

39. WAQ to find student deatils whose name starts with AB and ends j and case insensative

db.students.find({
    Name:{$regex:"^AB.*j$" , $options:"i"}
});
40. WAQ to find student deatils where letter "h" exist in third place of his name.

db.students.find({
    Name:{$regex:"^..h",$options:"i"}
});

41.WAQ to find student details whose name not ends with Kumar
db.students.find({ Name: { $not: { $regex: "Kumar$", $options: "i" } } });

================= Handling Object and Array of data ==================
42. WAQ to insert data which are in object and in array

db.students.insertOne({
    Name:"Raj",
    Address:{
        permanent:"patna",
        temporary:"delhi"
    },
    Contact:{
        Calling:8210202331,
        Whatsapp:9709997286
    },
    Courses:["NODE","EXPRESS-JS" ,"MONGODB","React"]
});

43. WAQ to search student deatils whose temporary address is delhi
db.students.find({
    "Address.temporary":"delhi"
});

44. WAQ to search student deatils whose temporary address is delhi and
    he is enrolled in course "MongoDB"

db.students.find({ "Address.temporary": "delhi" ,"Courses":"MongoDB"});

45. WAQ to update temporary address delhi to pune whose temporary address is delhi

db.students.updateOne(
    {"Address.temporary":"delhi"},
    {$set:{"Address.temporary":"pune"}}
    );

46. Insert 
db.students.insertOne({
    Name:"Ajit",
    Address:{
        permanent:"patna",
        temporary:"delhi"
    },
    Contact:{
        Calling:8210202331,
        Whatsapp:9709997286
    },
    Courses:["NODE","EXPRESS-JS" ,"MONGODB","React"],
    CourseStatus:[
        {"NODE":"IN-PROGRES"},
        {"EXPRESSJS":"IN-PROGRES"},
        {"MONGODB":"IN-PROGRES"},
        {"React":"NOT STARTED"}
    ]
});


47 . WAQ  to find the resturants which belongs to the borough bronx 
and cusine is American or chinese

db.returants.find({
    "borough":"Queens",
    $or:[
        {"cusine":"American"},
        {"cusine":"chinese"}
    ]
});
 
48. WAQ to find resturants whose building is 88825 and zipcode 11369

db.restaurants.find({
  "address.building": "88825",
  "address.zipcode": "11369"
})
49 waq to find resturants  where street exist in address 
db.restruants.find({
db.restaurants.find({
  "address.street": { $exists: true }
})

50. WAQ to find resturants where at least one grade score less than 5
db.restaraunts.find({ "grades.score":{$lt:5}})
51. WAQ to find resturants whose socre is 3 and 5 and belongs to zipcode 80002

db.restaraunts.find({
    $and:[
        {"grades.score":3},
        {"grades.score":5},
        {"address.zipcode":80002}
    ]
});

52. WAQ to find resturants building,cusine,name where resturant_id is 110
db.returants.find({"restaurant_id":110},{name:1,cuisine:1,address.building:1});

53. WAQ to find resturants building,cusine,name where shop  exist in nlast of it's name
db.restaurants.find({Name:{$regex:"shop$",$options:"i"}},{"address.building:1,name:1,cuisine:1});

===========================  Aggregation PIPELINE ===================
  * GroupBY  * avg,sum,max,min,sum * pipeline ,* stage
=====================================================================
54. WAQ to find out total number of resturants in each location .

Notes: to implement group we have to use Aggregation pipline .
    
       An aggregation pipleine is consist of one or more that one stages that process documents.
         each stage performs an operation on the input documents  and which is the output for next stage .
    An aggregation pipeline can return results of groups of document  for Exampl
    total count , sum , average . or we can perform joins between collections.

syntex:
db. collectionname.aggregate([
    {<stage 1>},
    {<stage 2>},
    {<stage 3>}
]);

db.returants.aggregate([
    {
        $group:{
            _id:"$borough",
            totalCount:{$sum:1 }
        }
    }
]);


55. WAQ to find total salary dispose in each department 

db.employees.aggregate([
    {
        $group:{
            _id:"$department",
            totalSalary:{$sum:"$salary"}
        }
    }
]);

56. WAQ to find total salary dispose in each department  and sort the data in ascending order a/c to 
totalSalary of each department in ascending order
db.employees.aggregate([
    {
        $group:{
            _id:"$department",
            totalSalary:{$sum:"$salary"}
        }
    },
    {
      $sort:{totalSalary:1}  
    }
]);

57. WAQ to find total salary dispose in each department  and sort the data in ascending order a/c to 
totalSalary of each department in ascending order and output only top two documents.
db.employees.aggregate([
    {
        $group:{
            _id:"$department",
            totalSalary:{$sum:"$salary"}
        }
    },
    {
      $sort:{totalSalary:1}  
    },
    {
      $limit:2
    }
]);


58. WAQ to find total salary dispose in each department and for each branch
db.employees.aggregate([
    {
        $group:{
            _id:{branch:"$branch",departemnt:"$department"}
            totalSalary:{$sum:"$salary"}
        }
    }
]);

Note: Multiple collumns groups

=============Agrregation pipline Lookups(joins)=====================
$lookups: is use to get data from more than one collection basically this helps
         to establish joins between the collection .

Collection : Orders 
db.Orders.insertMany([
{
    "order_number":"001",
    "cust_id":"C1",
    "order_total":10000,
    "payment_mode":"online",
    "payment_method":"UPI"
 },
 {
    "order_number":"002",
    "cust_id":"C1",
    "order_total":5000,
    "payment_mode":"online",
    "payment_method":"UPI"
 },
  {
    "order_number":"003",
    "cust_id":"C2",
    "order_total":12000,
    "payment_mode":"OFFLINE",
    "payment_method":"COD"
 },
   {
    "order_number":"004",
    "cust_id":"C2",
    "order_total":500,
    "payment_mode":"ONLINE",
    "payment_method":"UPI"
 }
]);
 
 Collection:Customers
 db.Customers.insertMany([
{
    "cust_id":"C1",
    "Name":"Raj",
    "Email":"raj@gmail.com",
    "Address":"PATNA"
 },
  {
    "cust_id":"C2",
    "Name":"Prince",
    "Email":"prince@gmail.com",
    "Address":"PATNA"
 },
  {
    "cust_id":"C3",
    "Name":"Akash",
    "Email":"akash@gmail.com",
    "Address":"PATNA"
 }
 ]);
 

59. WAQ To find orders with customer details .

db.Orders.aggregate([
 {
    $lookup:{
        from:"Customers",
        localField:"cust_id", // orders table customer id
        foreignField:"cust_id",
        as:"Customer_details"
    }
 }
]);
Note:$lookup  is use to perform join between two or more than two  collections basically this helps
         to get data and check conditions between two collection .

60. WAQ to find orderdetails(order_number,order_total,payment_method)
     and respective customer deatils (cust_id,name,address)

Note: $project: To fetch Only specified columns/keys 
Note: $unwind: To flatten resultent array

db.Orders.aggregate([
    {
        $lookup:{
            from:"Customers",
            localField:"cust_id", 
            foreignField:"cust_id",
            as:"Customer_details"
        }
    },
    {
      $unwind:"$Customer_details"
    },
    {
      $project:{
        "order_number":1,
        "order_total":1,
        payment_method:1,
        "Customer_details.cust_id":1,
        "Customer_details.Name":1,
        "Customer_details.Address":1
      }
    }
]);


61. WAQ to find orderdetails(order_number,order_total,payment_method)
     and respective customer deatils (cust_id,name,address) where cust_id is "C1"


db.Orders.aggregate([
    {
       $match:{
        "cust_id":"C1"
       }
    },
    {
        $lookup:{
            from:"Customers",
            localField:"cust_id", 
            foreignField:"cust_id",
            as:"Customer_details"
        }
    },
    {
      $unwind:"$Customer_details"
    },
    {
      $project:{
        "order_number":1,
        "order_total":1,
        "payment_method":1,
        "Customer_details.cust_id":1,
        "Customer_details.Name":1,
        "Customer_details.Address":1
      }
    }
]);

Note: $match: is use to set conditions while perfom joins

62. WAQ to find orderdetails(order_number,order_total,payment_method)
     and respective customer deatils (cust_id,name,address) where order total amount is greater than equals 12000


db.Orders.aggregate([
    {
       $match:{
        "order_total":{$gte:12000}
       }
    },
    {
        $lookup:{
            from:"Customers",
            localField:"cust_id", 
            foreignField:"cust_id",
            as:"Customer_details"
        }
    },
    {
      $unwind:"$Customer_details"
    },
    {
      $project:{
        "order_number":1,
        "order_total":1,
        "payment_method":1,
        "Customer_details.cust_id":1,
        "Customer_details.Name":1,
        "Customer_details.Address":1
      }
    }
]);

63.WAQ to find customers details with orders 

db.Customers.aggregate([
    {
        $lookup:{
            from:"Orders",
            localField:"cust_id", 
            foreignField:"cust_id",
            as:"order_details"
        }
    }
]);


Note:  By default mongodb perform left join means (all data from left collection and matching data from right collection)
Note: Above all examples are of LEFT JOIN 

64.WAQ to find customers details with orders and it should returns 
   only those customer which have orders (INNER JOIN);


db.Customers.aggregate([
    {
      $match:{"cust_id":"C1"}
    },
    {  
        $lookup:{
            from:"Orders",
            localField:"cust_id", 
            foreignField:"cust_id",
            as:"order_details"
        }
    },
    { 
            $match:{
                "order_details":{$ne:[]}  // Use to perform inner join
            }
        
    }
]);


Note: you can use multiple lookup , match in your pipeline